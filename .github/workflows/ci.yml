jobs:
  boringssl_clone:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Clone BoringSSL repo
      run: 'git clone --depth 1 --filter=blob:none --no-checkout https://github.com/google/boringssl.git
        "${{ runner.temp }}/boringssl"

        echo Using BoringSSL commit: $(cd "${{ runner.temp }}/boringssl"; git rev-parse
        HEAD)

        '
    - continue-on-error: true
      name: Archive BoringSSL source
      uses: actions/upload-artifact@v1
      with:
        name: boringssl-source
        path: ${{ runner.temp }}/boringssl
  build:
    needs: boringssl_clone
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Set up JDK 11 for toolchains
      uses: actions/setup-java@v1.4.3
      with:
        java-version: 11
    - continue-on-error: true
      name: Set runner-specific environment variables
      run: 'echo "ANDROID_HOME=${{ runner.temp }}/android-sdk" >> $GITHUB_ENV

        echo "ANDROID_SDK_ROOT=${{ runner.temp }}/android-sdk" >> $GITHUB_ENV

        echo "BORINGSSL_HOME=${{ runner.temp }}/boringssl" >> $GITHUB_ENV

        echo "SDKMANAGER=${{ runner.temp }}/android-sdk/cmdline-tools/bin/sdkmanager"
        >> $GITHUB_ENV

        echo "M2_REPO=${{ runner.temp }}/m2" >> $GITHUB_ENV

        '
      shell: bash
    - continue-on-error: true
      uses: actions/checkout@v2
    - continue-on-error: true
      if: runner.os == 'Linux'
      name: Setup Linux environment
      run: "echo \"CC=clang\" >> $GITHUB_ENV\necho \"CXX=clang++\" >> $GITHUB_ENV\n\
        \nsudo dpkg --add-architecture i386\nsudo add-apt-repository ppa:openjdk-r/ppa\n\
        sudo apt-get -qq update\nsudo apt-get -qq install -y --no-install-recommends\
        \ \\\n  gcc-multilib \\\n  g++-multilib \\\n  ninja-build \\\n  openjdk-11-jre-headless\n"
    - continue-on-error: true
      if: runner.os == 'macOS'
      name: Setup macOS environment
      run: 'brew update || echo update failed

        brew install ninja || echo update failed

        '
    - continue-on-error: true
      name: install Go
      uses: actions/setup-go@v1
      with:
        go-version: 1.19.3
    - continue-on-error: true
      if: runner.os == 'Windows'
      name: Setup Windows environment
      run: 'choco install nasm -y

        choco install ninja -y

        '
    - continue-on-error: true
      name: Fetch BoringSSL source
      uses: actions/download-artifact@v1
      with:
        name: boringssl-source
        path: ${{ runner.temp }}/boringssl
    - continue-on-error: true
      name: Checkout BoringSSL master branch
      run: 'cd "$BORINGSSL_HOME"

        git checkout --progress --force -B master

        '
      shell: bash
    - continue-on-error: true
      env:
        MACOSX_DEPLOYMENT_TARGET: 10.13
      if: runner.os == 'macOS'
      name: Build BoringSSL x86 and ARM MacOS
      run: 'mkdir -p "$BORINGSSL_HOME/build.x86"

        pushd "$BORINGSSL_HOME/build.x86"

        cmake -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64
        -GNinja ..

        ninja

        popd


        mkdir -p "$BORINGSSL_HOME/build.arm"

        pushd "$BORINGSSL_HOME/build.arm"

        cmake -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64
        -GNinja ..

        ninja

        popd

        '
    - continue-on-error: true
      if: runner.os == 'Linux'
      name: Build BoringSSL 64-bit Linux
      run: 'mkdir -p "$BORINGSSL_HOME/build64"

        pushd "$BORINGSSL_HOME/build64"

        cmake -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE -DCMAKE_BUILD_TYPE=Release -GNinja
        ..

        ninja

        popd

        '
    - continue-on-error: true
      if: runner.os == 'Windows'
      name: Build BoringSSL 64-bit Windows
      run: 'cd $Env:BORINGSSL_HOME


        & $Env:GITHUB_WORKSPACE\.github\workflows\vsenv.ps1 -arch x64 -hostArch x64

        mkdir build64

        pushd build64

        cmake -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS_RELEASE=/MT
        -DCMAKE_CXX_FLAGS_RELEASE=/MT -GNinja ..

        ninja

        popd

        '
    - continue-on-error: true
      if: runner.os == 'Linux'
      name: Setup Android environment
      run: 'cd "${{ runner.temp }}"

        curl -L "${{ matrix.tools_url }}" -o android-tools.zip

        mkdir -p "$ANDROID_HOME"

        unzip -q android-tools.zip -d "$ANDROID_HOME"

        yes | "$SDKMANAGER" --sdk_root="$ANDROID_HOME" --licenses || true

        "$SDKMANAGER" --sdk_root="$ANDROID_HOME" tools

        "$SDKMANAGER" --sdk_root="$ANDROID_HOME" platform-tools

        "$SDKMANAGER" --sdk_root="$ANDROID_HOME" ''build-tools;30.0.3''

        "$SDKMANAGER" --sdk_root="$ANDROID_HOME" ''platforms;android-26''

        "$SDKMANAGER" --sdk_root="$ANDROID_HOME" ''extras;android;m2repository''

        "$SDKMANAGER" --sdk_root="$ANDROID_HOME" ''ndk;25.2.9519653''

        "$SDKMANAGER" --sdk_root="$ANDROID_HOME" ''cmake;3.22.1''

        '
      shell: bash
    - continue-on-error: true
      name: Build with Gradle
      run: ./gradlew assemble -PcheckErrorQueue
      shell: bash
    - continue-on-error: true
      name: Test with Gradle
      run: ./gradlew test -PcheckErrorQueue
      shell: bash
    - continue-on-error: true
      name: Other checks with Gradle
      run: ./gradlew check -PcheckErrorQueue
      shell: bash
    - continue-on-error: true
      name: Publish to local Maven repo
      run: ./gradlew publishToMavenLocal -Dmaven.repo.local="$M2_REPO"
      shell: bash
    - continue-on-error: true
      name: Upload Maven respository
      uses: actions/upload-artifact@v1
      with:
        name: m2repo-${{ runner.os }}
        path: ${{ runner.temp }}/m2
    - continue-on-error: true
      if: runner.os == 'Linux'
      name: Build test JAR with dependencies
      run: ./gradlew :conscrypt-openjdk:testJar -PcheckErrorQueue
      shell: bash
    - continue-on-error: true
      if: runner.os == 'Linux'
      name: Upload test JAR with dependencies
      uses: actions/upload-artifact@v2
      with:
        if-no-files-found: error
        name: testjar
        path: openjdk/build/libs/conscrypt-openjdk-*-tests.jar
    strategy:
      fail-fast: false
      matrix:
        include:
        - platform: ubuntu-latest
          tools_url: https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        - platform: macos-latest
          tools_url: https://dl.google.com/android/repository/commandlinetools-mac-9477386_latest.zip
        - platform: windows-latest
          tools_url: https://dl.google.com/android/repository/commandlinetools-win-9477386_latest.zip
        platform:
        - ubuntu-latest
        - macos-latest
        - windows-latest
  openjdk-test:
    needs: uberjar
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - continue-on-error: true
      name: Download UberJAR
      uses: actions/download-artifact@v2
      with:
        name: m2repo-uber
        path: m2
    - continue-on-error: true
      name: Download Test JAR with Dependencies
      uses: actions/download-artifact@v2
      with:
        name: testjar
        path: testjar
    - continue-on-error: true
      name: Download JUnit runner
      run: mvn org.apache.maven.plugins:maven-dependency-plugin:3.1.2:copy -Dartifact=org.junit.platform:junit-platform-console-standalone:1.6.2
        -DoutputDirectory=. -Dmdep.stripVersion=true
      shell: bash
    - continue-on-error: true
      name: Run JUnit tests
      run: 'DIR="$(find m2/org/conscrypt/conscrypt-openjdk-uber -maxdepth 1 -mindepth
        1 -type d -print)"

        VERSION="${DIR##*/}"

        TESTJAR="$(find testjar -name ''*-tests.jar'')"

        java -jar junit-platform-console-standalone.jar -cp "$DIR/conscrypt-openjdk-uber-$VERSION.jar:$TESTJAR"
        -n=''${{ matrix.suite_class }}'' --scan-classpath --reports-dir=results --fail-if-no-tests

        '
      shell: bash
    - continue-on-error: true
      if: ${{ always() }}
      name: Archive test results
      uses: actions/upload-artifact@v2
      with:
        name: test-results-${{ matrix.platform }}-${{ matrix.java }}
        path: results
    strategy:
      fail-fast: false
      matrix:
        include:
        - java: 8
          suite_class: org.conscrypt.Conscrypt(OpenJdk)?Suite
        - java: 9
          suite_class: org.conscrypt.Conscrypt(OpenJdk)?Suite
        - java: 11
          suite_class: org.conscrypt.Conscrypt(OpenJdk)?Suite
        java:
        - 8
        - 9
        - 11
        platform:
        - ubuntu-latest
        - macos-latest
        - windows-latest
  uberjar:
    needs: build
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Set runner-specific environment variables
      run: 'echo "M2_REPO=${{ runner.temp }}/m2" >> $GITHUB_ENV

        echo "BORINGSSL_HOME=${{ runner.temp }}/boringssl" >> $GITHUB_ENV

        '
      shell: bash
    - continue-on-error: true
      name: Fetch BoringSSL source
      uses: actions/download-artifact@v1
      with:
        name: boringssl-source
        path: ${{ runner.temp }}/boringssl
    - continue-on-error: true
      name: Make fake BoringSSL directories
      run: '# TODO: remove this when the check is only performed when building.

        # BoringSSL is not needed during the UberJAR build, but the

        # assertion to check happens regardless of whether the project

        # needs it.

        mkdir -p "${{ runner.temp }}/boringssl/build64"

        mkdir -p "${{ runner.temp }}/boringssl/include"

        '
      shell: bash
    - continue-on-error: true
      name: Download Maven repository for Linux
      uses: actions/download-artifact@v1
      with:
        name: m2repo-Linux
        path: ${{ runner.temp }}/m2
    - continue-on-error: true
      name: Download Maven repository for MacOS
      uses: actions/download-artifact@v1
      with:
        name: m2repo-macOS
        path: ${{ runner.temp }}/m2
    - continue-on-error: true
      name: Download Maven repository for Windows
      uses: actions/download-artifact@v1
      with:
        name: m2repo-Windows
        path: ${{ runner.temp }}/m2
    - continue-on-error: true
      name: Build UberJAR with Gradle
      run: './gradlew :conscrypt-openjdk-uber:build -Dorg.conscrypt.openjdk.buildUberJar=true
        -Dmaven.repo.local="$M2_REPO"

        '
      shell: bash
    - continue-on-error: true
      name: Publish UberJAR to Maven Local
      run: './gradlew :conscrypt-openjdk-uber:publishToMavenLocal -Dorg.conscrypt.openjdk.buildUberJar=true
        -Dmaven.repo.local="$M2_REPO"

        '
      shell: bash
    - continue-on-error: true
      name: Upload Maven respository
      uses: actions/upload-artifact@v1
      with:
        name: m2repo-uber
        path: ${{ runner.temp }}/m2
name: Continuous integration
on:
  repository_dispatch:
    types: trigger-ga___ci.yml
